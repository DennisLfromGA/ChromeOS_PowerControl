#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR_FILE="/usr/local/bin/ChromeOS_PowerControl.install_dir"
if [ -f "$INSTALL_DIR_FILE" ]; then
    INSTALL_DIR=$(cat "$INSTALL_DIR_FILE")
else
    INSTALL_DIR="/usr/local/bin/ChromeOS_PowerControl"
fi
INSTALL_DIR="${INSTALL_DIR%/}"

CONFIG_FILE="$INSTALL_DIR/config.sh"

POWER_LOG="/var/log/powercontrol.log"
RUN_FLAG="$INSTALL_DIR/.powercontrol_enabled"
PID_FILE="$INSTALL_DIR/.powercontrol_pid"
CPU_VENDOR=$(grep -m1 'vendor_id' /proc/cpuinfo | awk '{print $3}' || echo "unknown")
MONITOR_PID_FILE="$INSTALL_DIR/.powercontrol_tail_fan_monitor.pid"
PERF_PATH=""
TURBO_PATH=""
IS_AMD=0
IS_INTEL=0
IS_ARM=0

detect_cpu_type() {
    case "$CPU_VENDOR" in
        GenuineIntel)
            IS_INTEL=1
            if [ -f "/sys/devices/system/cpu/intel_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
                TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
            fi
            ;;
        AuthenticAMD)
            IS_AMD=1
            if [ -f "/sys/devices/system/cpu/amd_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/amd_pstate/max_perf_pct"
            else
                PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            fi
            ;;
        *)
            IS_ARM=1
            PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            ;;
    esac
}

    DEFAULT_MIN_TEMP=60
    DEFAULT_MAX_TEMP=86
    DEFAULT_MIN_PERF_PCT=50
    DEFAULT_MAX_PERF_PCT=100
    MAX_TEMP_LIMIT=90

MAX_TEMP=""
MAX_PERF_PCT=""
MIN_TEMP=""
MIN_PERF_PCT=""

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo "Creating default configuration..."
        MIN_TEMP=${MIN_TEMP:-$DEFAULT_MIN_TEMP}
        MAX_TEMP=${MAX_TEMP:-$DEFAULT_MAX_TEMP}
        MIN_PERF_PCT=${MIN_PERF_PCT:-$DEFAULT_MIN_PERF_PCT}
        MAX_PERF_PCT=${MAX_PERF_PCT:-$DEFAULT_MAX_PERF_PCT}
        validate_config
    fi
}

validate_config() {
    # Set defaults if empty
    if [[ -z "$MAX_TEMP" ]]; then MAX_TEMP=$DEFAULT_MAX_TEMP; fi
    if [[ -z "$MIN_TEMP" ]]; then MIN_TEMP=$DEFAULT_MIN_TEMP; fi
    if [[ -z "$MAX_PERF_PCT" ]]; then MAX_PERF_PCT=$DEFAULT_MAX_PERF_PCT; fi
    if [[ -z "$MIN_PERF_PCT" ]]; then MIN_PERF_PCT=$DEFAULT_MIN_PERF_PCT; fi

    # Clamp temps to limits
    if (( MAX_TEMP > MAX_TEMP_LIMIT )); then
        echo "Warning: MAX_TEMP exceeds limit ($MAX_TEMP_LIMIT), resetting."
        MAX_TEMP=$DEFAULT_MAX_TEMP
    fi

    if (( MIN_TEMP >= MAX_TEMP )); then
        echo "Warning: MIN_TEMP >= MAX_TEMP, adjusting."
        MIN_TEMP=$(( MAX_TEMP - 10 ))
    fi

    # Clamp perf pct to [10..100]
    if (( MIN_PERF_PCT < 10 )); then
        echo "Warning: MIN_PERF_PCT below 10, resetting."
        MIN_PERF_PCT=10
    elif (( MIN_PERF_PCT > 100 )); then
        echo "Warning: MIN_PERF_PCT above 100, resetting."
        MIN_PERF_PCT=100
    fi

    if (( MAX_PERF_PCT < 10 )); then
        echo "Warning: MAX_PERF_PCT below 10, resetting."
        MAX_PERF_PCT=10
    elif (( MAX_PERF_PCT > 100 )); then
        echo "Warning: MAX_PERF_PCT above 100, resetting."
        MAX_PERF_PCT=100
    fi

    if (( MAX_PERF_PCT < MIN_PERF_PCT )); then
        echo "Warning: MAX_PERF_PCT < MIN_PERF_PCT, adjusting."
        if (( MIN_PERF_PCT <= 90 )); then
            MAX_PERF_PCT=$(( MIN_PERF_PCT + 10 ))
        else
            MAX_PERF_PCT=100
        fi
    fi
}





save_config() {
    validate_config

    if [ "$MAX_TEMP" != "$DEFAULT_MAX_TEMP" ]; then
        sed -i "s/^MAX_TEMP=.*/MAX_TEMP=$MAX_TEMP/" "$CONFIG_FILE" || echo "MAX_TEMP=$MAX_TEMP" >> "$CONFIG_FILE"
    fi
    if [ "$MIN_TEMP" != "$DEFAULT_MIN_TEMP" ]; then
        sed -i "s/^MIN_TEMP=.*/MIN_TEMP=$MIN_TEMP/" "$CONFIG_FILE" || echo "MIN_TEMP=$MIN_TEMP" >> "$CONFIG_FILE"
    fi
    if [ "$MAX_PERF_PCT" != "$DEFAULT_MAX_PERF_PCT" ]; then
        sed -i "s/^MAX_PERF_PCT=.*/MAX_PERF_PCT=$MAX_PERF_PCT/" "$CONFIG_FILE" || echo "MAX_PERF_PCT=$MAX_PERF_PCT" >> "$CONFIG_FILE"
    fi
    if [ "$MIN_PERF_PCT" != "$DEFAULT_MIN_PERF_PCT" ]; then
        sed -i "s/^MIN_PERF_PCT=.*/MIN_PERF_PCT=$MIN_PERF_PCT/" "$CONFIG_FILE" || echo "MIN_PERF_PCT=$MIN_PERF_PCT" >> "$CONFIG_FILE"
    fi

    source "$INSTALL_DIR/config.sh"  
    echo "Configuration saved to $CONFIG_FILE"
}

load_config

get_temp() {
    local temp_celsius
    temp_celsius=$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null)

    if [[ -n "$temp_celsius" && "$temp_celsius" =~ ^[0-9]+$ ]]; then
        temp_c=$((temp_celsius / 1000))
        echo "$temp_c"
    else
        echo "Failed to get temperature." >&2
        return 1
    fi
}

set_max_perf_pct() {
    local pct=$1
    load_config
    if (( IS_INTEL == 1 || IS_AMD == 1 )) && [[ "$PERF_PATH" == *max_perf_pct ]]; then
        if [ -w "$PERF_PATH" ]; then
            echo "$pct" | tee "$PERF_PATH" > /dev/null
        else
            echo "${RED}Permission denied: Cannot write to $PERF_PATH${RESET}" >&2
            exit 1
        fi
   elif (( IS_AMD == 1 || IS_ARM == 1 )); then
        local max_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/cpuinfo_max_freq)
        local min_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/cpuinfo_min_freq)
        local target_freq=$(( min_freq + (max_freq - min_freq) * pct / 100 ))

        if [ -w "$PERF_PATH" ]; then
            echo "$target_freq" | tee "$PERF_PATH" > /dev/null
        else
            echo "${RED}Permission denied: Cannot write to $PERF_PATH${RESET}" >&2
            exit 1
        fi
        save_config
    fi
}


set_temp_threshold() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Temperature threshold must be an integer."
        exit 1
    fi
    if (( $1 > MAX_TEMP_LIMIT )); then
        echo "Error: Temperature threshold cannot exceed $MAX_TEMP_LIMIT째C."
        exit 1
    fi
    load_config
    MAX_TEMP=$1
    save_config
    echo "Max temperature threshold set to $MAX_TEMP째C"
}


set_min_temp() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Min temperature must be an integer."
        exit 1
    fi
    load_config
    MIN_TEMP=$1
    save_config
    echo "Min temperature threshold set to $MIN_TEMP째C"
}

set_min_perf_pct() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: min_perf_pct must be an integer."
        exit 1
    fi
    if (( $1 < 10 || $1 > 100 )); then
        echo "Error: min_perf_pct must be between 10 and 100."
        exit 1
    fi
    load_config
    MIN_PERF_PCT=$1
    save_config
    echo "Minimum performance percentage set to $MIN_PERF_PCT%"
}

set_no_turbo() {
    local value="$1"
    if [[ "$value" != "0" && "$value" != "1" ]]; then
        echo "Usage: $0 no_turbo {0|1}"
        exit 1
    fi

    if [ "$IS_INTEL" -eq 1 ] && [ -w "$TURBO_PATH" ]; then
        echo "$value" | sudo tee "$TURBO_PATH" > /dev/null
        if [ "$value" -eq 1 ]; then
            echo "Turbo Boost Disabled (Intel)"
        else
            echo "Turbo Boost Enabled (Intel)"
        fi
    elif [ "$IS_AMD" -eq 1 ]; then
        echo "Turbo disable is not directly supported on AMD via no_turbo."
        echo "Adjusting max frequency instead. Use max_perf_pct or manual tuning."
    else
        echo "Turbo control is unsupported on this platform (likely ARM)."
    fi
}

cleanup() {
    echo "Caught interrupt signal, stopping PowerControl..."
    stop_monitoring
    exit 0
}

trap cleanup SIGINT SIGTERM

start_monitoring_loop() {
    load_config
    detect_cpu_type
    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"
    echo "Starting PowerControl (PID $$)."
    

    last_reload_time=0

while [ -f "$RUN_FLAG" ]; do
    now=$(date +%s)
    if (( now - last_reload_time >= 10 )); then
        load_config
        validate_config
        min_temp_c=$MIN_TEMP
        high_temp_c=$MAX_TEMP
        min_perf_pct=$MIN_PERF_PCT
        max_perf_pct=$MAX_PERF_PCT
        last_reload_time=$now
    fi

    temp_c=$(get_temp)
    if [ $? -ne 0 ]; then
        echo "Failed to get temperature. Retrying..."
        sleep 1
        continue
    fi

    if [ -z "$temp_c" ]; then
        echo "Error: No temperature value returned. Retrying..."
        sleep 1
        continue
    fi

    if ! [[ "$min_temp_c" =~ ^[0-9]+$ && "$high_temp_c" =~ ^[0-9]+$ && "$max_perf_pct" =~ ^[0-9]+$ && "$min_perf_pct" =~ ^[0-9]+$ ]]; then
        echo "Invalid configuration values detected. Skipping."
        sleep 1
        continue
    fi

    current_pct=$(cat "$PERF_PATH" 2>/dev/null || echo "0")

    if (( temp_c <= min_temp_c )); then
        pct=$max_perf_pct
    elif (( temp_c >= high_temp_c )); then
        pct=$min_perf_pct
    else
        delta_c=$(( high_temp_c - min_temp_c ))
        temp_offset=$(( temp_c - min_temp_c ))
        reduction=$(( (max_perf_pct - min_perf_pct) * temp_offset / delta_c ))
        pct=$(( max_perf_pct - reduction ))
    fi

    if [[ "$current_pct" != "$pct" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - CPU $temp_c째C -> Clockspeed $pct%" | tee -a "$POWER_LOG"
        set_max_perf_pct "$pct"
    fi

    sleep 1
done

    echo "${YELLOW}PowerControl stopped.${RESET}"
    rm -f "$PID_FILE"
}

show_status() {
    CPU_VENDOR=$(grep -m1 'vendor_id' /proc/cpuinfo | awk '{print $3}' || echo "unknown")
    PERF_PATH=""
    TURBO_PATH=""
    IS_AMD=0
    IS_INTEL=0
    IS_ARM=0

    case "$CPU_VENDOR" in
        GenuineIntel)
            IS_INTEL=1
            PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
            TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
            ;;
        AuthenticAMD)
            IS_AMD=1
            if [ -f "/sys/devices/system/cpu/amd_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/amd_pstate/max_perf_pct"
            else
                PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            fi
            ;;
        *)
            IS_ARM=1
            PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            ;;
    esac

    echo "PowerControl Status:"

    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            echo "${GREEN}Status: RUNNING (PID $PID)${RESET}"
        else
            rm -f "$PID_FILE"
            rm -f "$RUN_FLAG"
            echo "${YELLOW}  Status: STOPPED ${YELLOW}"
        fi
    else
        echo "${YELLOW}  Status: STOPPED ${YELLOW}"
    fi

    echo "  Configured max_temp: $MAX_TEMP째C"
    echo "  Configured min_temp: $MIN_TEMP째C"
    echo "  Configured max_perf_pct: $MAX_PERF_PCT%"
    echo "  Configured min_perf_pct: $MIN_PERF_PCT%"

    if [ -f "$PERF_PATH" ]; then
        current_val=$(cat "$PERF_PATH")
        if [[ "$PERF_PATH" == *max_perf_pct ]]; then
            echo "  Current max_perf_pct: $current_val%"
        else
            echo "  Current max frequency: $((current_val / 1000)) MHz"
        fi
    else
        echo "${RED}max_perf_pct/frequency path not found.${RESET}"
    fi

    if [ "$IS_INTEL" -eq 1 ] && [ -f "$TURBO_PATH" ]; then
        turbo_val=$(cat "$TURBO_PATH")
        if [[ "$turbo_val" -eq 1 ]]; then
            echo "  Turbo Boost: Disabled"
        else
            echo "  Turbo Boost: Enabled"
        fi
    elif [ "$IS_AMD" -eq 1 ]; then
        echo "  Turbo Boost: Control unavailable via no_turbo path on AMD."
    else
        echo "  Turbo Boost: Not supported on this platform."
    fi

    echo
}

stop_monitoring() {
    if [ -n "$POWERCONTROL_STOPPING" ]; then
        return
    fi
    POWERCONTROL_STOPPING=1

    if [ ! -f "$PID_FILE" ]; then
        return
    fi

    PID=$(cat "$PID_FILE")
    if ps -p "$PID" > /dev/null 2>&1; then
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Stopping PowerControl (PID $PID)...${RESET}"  | tee -a "$POWER_LOG"
        rm -f "$RUN_FLAG"
        kill "$PID"

        for i in {1..10}; do
            if ! ps -p "$PID" > /dev/null 2>&1; then
                echo "PowerControl stopped."
                rm -f "$PID_FILE"
                return
            fi
            sleep 1
        done
        kill -9 "$PID"
        rm -f "$PID_FILE"
    else
        rm -f "$PID_FILE"
        rm -f "$RUN_FLAG"
    fi
}

uninstall_script() {
    if [ -z "$INSTALL_DIR" ]; then
        echo "Error: INSTALL_DIR is not set."
        exit 1
    fi

    local script="$INSTALL_DIR/Uninstall_ChromeOS_PowerControl.sh"

    if [ -d "$INSTALL_DIR" ]; then
        if [ -x "$script" ]; then
            echo "Uninstalling ChromeOS PowerControl..."
            sudo bash "$script"
        else
            echo "${RED}Uninstall script not found or not executable at: $script${RESET}"
            exit 1
        fi
    else
        echo "${RED}Installation directory not found: $INSTALL_DIR${RESET}"
        exit 1
    fi
}


show_help() {
    echo "PowerControl commands with examples:"
    echo ""
    echo "sudo powercontrol                     # Show status"
    echo "sudo powercontrol start               # Throttle CPU based on temperature curve"
    echo "sudo powercontrol stop                # Restore default CPU settings"
    echo "sudo powercontrol no_turbo 1          # Disable turbo boost"
    echo "sudo powercontrol max_perf_pct 75     # Set max performance percentage"
    echo "sudo powercontrol min_perf_pct 50     # Set minimum performance at max temp"
    echo "sudo powercontrol max_temp 86         # Max temperature threshold"
    echo "sudo powercontrol min_temp 60         # Min temperature threshold"
    echo "sudo powercontrol monitor             # Live temperature monitoring"
    echo "sudo powercontrol startup             # Initiate powercontrol + no_turbo /etc/init .conf installer"
    echo "sudo powercontrol help                # Help menu"
    echo "sudo powercontrol uninstall           # Initiate uninstaller"
    echo ""
}

max_perf_pct() {
    if [ -z "$2" ]; then
        if [ -f "$PERF_PATH" ]; then
            current_pct=$(cat "$PERF_PATH")
            echo "Current max_perf_pct: $current_pct%"
        else
            echo "${RED}max_perf_pct path not found: $PERF_PATH${RESET}"
            exit 1
        fi
    else
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
            echo "${RED}Error: max_perf_pct value must be an integer.${RESET}"
            exit 1
        fi

        if (( $2 < 10 || $2 > 100 )); then
            echo "${RED}Error: max_perf_pct must be between 10 and 100.${RESET}"
            exit 1
        fi

        MAX_PERF_PCT=$2
        save_config
        echo "Setting max_perf_pct to $MAX_PERF_PCT%"
        set_max_perf_pct "$MAX_PERF_PCT"
    fi
}

case "$1" in
    start)
        if [ ! -f "$CONFIG_FILE" ]; then
    echo "Initializing config file with default values..."
    load_config
fi
        stop_monitoring >/dev/null 2>&1
       LOG_FILE="/var/log/powercontrol.log"

if [ -f "$POWER_LOG" ] && [ "$(stat -c%s "$POWER_LOG")" -gt 32768 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 32KB)" > "$POWER_LOG"
fi

nohup "$0" __monitor__ >> "$POWER_LOG" 2>&1 &
echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - PowerControl monitoring started in background. Output is logged to $POWER_LOG${RESET}"

        ;;
    stop)
        stop_monitoring
        ;;
    max_temp)
        set_temp_threshold "$2"
        ;;
    min_temp)
        set_min_temp "$2"
        ;;
    min_perf_pct)
        set_min_perf_pct "$2"
        ;;
    max_perf_pct)
        max_perf_pct "$@"
        ;;
    no_turbo)
        set_no_turbo "$2"
        ;;
    uninstall)
        uninstall_script
        ;;
    help)
        show_help
        ;;
  monitor)
    LOG_FILE="/var/log/powercontrol.log"
    MONITOR_PID_FILE="$INSTALL_DIR/powercontrol_tail_monitor.pid"

    if [ -f "$MONITOR_PID_FILE" ]; then
        MONITOR_PID=$(cat "$MONITOR_PID_FILE")
        if ps -p "$MONITOR_PID" > /dev/null 2>&1; then
            echo "Stopping monitor (PID $MONITOR_PID)..."
            kill "$MONITOR_PID"
            rm -f "$MONITOR_PID_FILE"
            exit 0
        else
            rm -f "$MONITOR_PID_FILE"
        fi
    fi

    tail -fn +1 "$LOG_FILE" &
    echo $! > "$MONITOR_PID_FILE"
    echo "Monitor started (PID $!)"
    ;;
     startup)
    CONF_SOURCE="$INSTALL_DIR/powercontrol.conf"
    CONF_TARGET="/etc/init/powercontrol.conf"
    CONF_SOURCE_NO_TURBO="$INSTALL_DIR/no_turbo.conf"
    
    if [ "$IS_INTEL" -eq 1 ]; then
        read -p "Do you want to disable Turbo Boost automatically on startup? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if [ -f "$CONF_SOURCE_NO_TURBO" ]; then
                echo "Copying no_turbo.conf to /etc/init/..."
                sudo cp "$CONF_SOURCE_NO_TURBO" "/etc/init/"
                echo "no_turbo.conf copied."
            else
                echo "Intel Turbo Boost will start automatically."
            fi
        else
            echo "Intel Turbo Boost enabled on startup."
            sudo rm -r /etc/init/no_turbo.conf
        fi
    fi

    read -p "Do you want PowerControl to startup automatically on boot? (y/n): " choice
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        if [ -f "$CONF_SOURCE" ]; then
            echo "Copying powercontrol.conf to /etc/init/..."
            sudo cp "$CONF_SOURCE" "$CONF_TARGET"
            echo "powercontrol.conf copied."
        else
            echo "${RED}powercontrol.conf not found at $CONF_SOURCE${RESET}"
        fi
    else
        echo "PowerControl will not startup automatically on boot."
        sudo rm -f /etc/init/powercontrol.conf
    fi
    ;;
    __monitor__)
        LOG_FILE="/var/log/powercontrol.log"
        start_monitoring_loop
        ;;
    *)
        show_status
        ;;
esac
