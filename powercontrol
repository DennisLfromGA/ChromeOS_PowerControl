#!/bin/bash

INSTALL_DIR="/usr/local/bin/ChromeOS_PowerControl"
USER_HOME="/home/chronos"
CONFIG_FILE="$INSTALL_DIR/.powercontrol_config"
RUN_FLAG="$INSTALL_DIR/.powercontrol_enabled"
PID_FILE="$INSTALL_DIR/.powercontrol_pid"
PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"

DEFAULT_MAX_TEMP_K=358
DEFAULT_MAX_PERF_PCT=80
MAX_TEMP_LIMIT_K=363

MAX_TEMP_K=
MAX_PERF_PCT=

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        MAX_TEMP_K=$DEFAULT_MAX_TEMP_K
        MAX_PERF_PCT=$DEFAULT_MAX_PERF_PCT
        save_config
    fi
}

save_config() {
    echo "MAX_TEMP_K=$MAX_TEMP_K" > "$CONFIG_FILE"
    echo "MAX_PERF_PCT=$MAX_PERF_PCT" >> "$CONFIG_FILE"
}

get_temp_kelvin() {
    local temp_line
    temp_line=$(sudo ectool temps 2 2>/dev/null | grep -m1 'SOC' || return 1)
    # Extract the temperature in Kelvin (first column)
    echo "$temp_line" | awk '{ print $1 }'
}




set_max_perf_pct() {
    local pct=$1
    if [ -w "$PERF_PATH" ]; then
        echo "$pct" | tee "$PERF_PATH" > /dev/null
    else
        echo "Permission denied: Cannot write to $PERF_PATH" >&2
        exit 1
    fi
}

set_temp_threshold() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Temperature threshold must be an integer."
        exit 1
    fi
    if (( $1 > MAX_TEMP_LIMIT_K )); then
        echo "Error: Temperature threshold cannot exceed 90°C ($MAX_TEMP_LIMIT_K K)."
        exit 1
    fi
    MAX_TEMP_K=$1
    save_config
    echo "Max temperature threshold set to $MAX_TEMP_K K"
}

set_no_turbo() {
    local value="$1"
    if [[ "$value" != "0" && "$value" != "1" ]]; then
        echo "Usage: $0 no_turbo {0|1}"
        exit 1
    fi

    if [ ! -w "$TURBO_PATH" ]; then
        echo "Permission denied: Cannot write to $TURBO_PATH" >&2
        exit 1
    fi

    echo "$value" | sudo tee "$TURBO_PATH" > /dev/null

    if [ "$value" -eq 1 ]; then
        echo "Turbo Boost Disabled"
    else
        echo "Turbo Boost Enabled"
    fi
}

start_monitoring_loop() {

    load_config

    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"
    echo "Starting PowerControl (PID $$)."

    while [ -f "$RUN_FLAG" ]; do
        temp_k=$(get_temp_kelvin)
        if [ $? -ne 0 ]; then
            sleep 1
            continue
        fi

        current_pct=$(cat "$PERF_PATH" 2>/dev/null || echo "0")

        # Linear throttling based on SOC temperature
        low_temp_k=333  # 60°C
        high_temp_k=359 # 86°C
        min_perf_pct=50
        max_perf_pct=100

        if (( temp_k <= low_temp_k )); then
            pct=$max_perf_pct
        elif (( temp_k >= high_temp_k )); then
            pct=$min_perf_pct
        else
            delta_k=$(( high_temp_k - low_temp_k ))
            temp_offset=$(( temp_k - low_temp_k ))
            reduction=$(( (max_perf_pct - min_perf_pct) * temp_offset / delta_k ))
            pct=$(( max_perf_pct - reduction ))
        fi

        if [[ "$current_pct" != "$pct" ]]; then
            echo "SOC Temperature $temp_k K -> Setting max_perf_pct to $pct%"
            set_max_perf_pct "$pct"
        fi

        sleep 1
    done

    echo "PowerControl stopped."
    rm -f "$PID_FILE"
}

show_status() {
    echo "PowerControl Status:"

    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            echo "  Status: RUNNING (PID $PID)"
        else
            echo "  Status: PID file exists but process not found. Cleaning up stale PID file."
            rm -f "$PID_FILE"
            rm -f "$RUN_FLAG"
            echo "  Status: STOPPED"
        fi
    else
        echo "  Status: STOPPED"
    fi

    load_config
    echo "  Configured max temperature: $MAX_TEMP_K K"
    echo "  Configured max_perf_pct: $MAX_PERF_PCT%"

    if [ -f "$PERF_PATH" ]; then
        current_pct=$(cat "$PERF_PATH")
        echo "  Current max_perf_pct: $current_pct%"
    else
        echo "  max_perf_pct path not found."
    fi

    if [ -f "$TURBO_PATH" ]; then
        turbo_val=$(cat "$TURBO_PATH")
        if [[ "$turbo_val" -eq 1 ]]; then
            echo "  Turbo Boost: Disabled"
        else
            echo "  Turbo Boost: Enabled"
        fi
    fi

    echo
    echo "=== ectool temps output ==="
    sudo ectool temps 2 2>/dev/null || echo "Failed to read ectool temps"
}

stop_monitoring() {
    if [ ! -f "$PID_FILE" ]; then
        return
    fi

    PID=$(cat "$PID_FILE")
    if ps -p "$PID" > /dev/null 2>&1; then
        echo "Stopping PowerControl (PID $PID)..."
        rm -f "$RUN_FLAG"
        kill "$PID"

        for i in {1..10}; do
            if ! ps -p "$PID" > /dev/null 2>&1; then
                echo "PowerControl stopped."
                rm -f "$PID_FILE"
                return
            fi
            sleep 1
        done

        echo "Process did not terminate, sending SIGKILL..."
        kill -9 "$PID"
        rm -f "$PID_FILE"
    else
        rm -f "$PID_FILE"
        rm -f "$RUN_FLAG"
    fi
}

uninstall_script() {
    local script="$INSTALL_DIR/Uninstall_ChromeOS_PowerControl.sh"
    if [ -x "$script" ]; then
        sudo bash "$script"
    else
        echo "Uninstall script not found or not executable at: $script"
        exit 1
    fi
}

show_help() {
    echo "PowerControl Script - Available Commands:"
    echo
    echo "  help               Show this help message."
    echo "  start              Start PowerControl monitoring in the background."
    echo "  stop               Stop PowerControl monitoring and restore Turbo Boost."
    echo "  settemp <K>        Set maximum allowed CPU temperature in Kelvin (e.g., 358)."
    echo "  no_turbo {0|1}     Enable (0) or disable (1) Intel Turbo Boost manually."
    echo "  max_perf_pct [PCT] Show or set max_perf_pct (minimum 10%)."
    echo "  uninstall          Run the PowerControl uninstaller script."
    echo "  (no command)       Show PowerControl status."
    echo
}

# New function for max_perf_pct command
handle_max_perf_pct() {
    # Check if PowerControl is running (monitoring loop)
    if [ -f "$RUN_FLAG" ]; then
        echo "Error: Cannot manually set max_perf_pct while PowerControl is running."
        echo "Please stop PowerControl first."
        exit 1
    fi

    if [ -z "$2" ]; then
        # No second argument, just show current value
        if [ -f "$PERF_PATH" ]; then
            current_pct=$(cat "$PERF_PATH")
            echo "Current max_perf_pct: $current_pct%"
        else
            echo "max_perf_pct path not found: $PERF_PATH"
            exit 1
        fi
    else
        # Attempt to set new value
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
            echo "Error: max_perf_pct value must be an integer."
            exit 1
        fi

        if (( $2 < 10 || $2 > 100 )); then
            echo "Error: max_perf_pct must be between 10 and 100."
            exit 1
        fi

        set_max_perf_pct "$2"
        echo "max_perf_pct set to $2%"
    fi
}

case "$1" in
    start)
    stop_monitoring >/dev/null 2>&1
    "$0" no_turbo 0 >/dev/null 2>&1
    # Run monitoring loop in foreground for debugging:
    "$0" __monitor__
    ;;

    __monitor__)
        start_monitoring_loop
        ;;

    stop)
        stop_monitoring
        "$0" no_turbo 1 >/dev/null 2>&1
        ;;

    settemp)
        if [ -z "$2" ]; then
            echo "Usage: $0 settemp <temp_in_Kelvin>"
            exit 1
        fi
        set_temp_threshold "$2"
        ;;

    no_turbo)
        if [ -z "$2" ]; then
            echo "Usage: $0 no_turbo {0|1}"
            exit 1
        fi
        set_no_turbo "$2"
        ;;

    max_perf_pct)
        handle_max_perf_pct "$@"
        ;;

    uninstall)
        uninstall_script
        ;;

    help)
        show_help
        ;;

    "")
        show_status
        ;;

    *)
        echo "Usage: $0 {start|stop|settemp|no_turbo|max_perf_pct|uninstall|help}"
        exit 1
        ;;
esac
