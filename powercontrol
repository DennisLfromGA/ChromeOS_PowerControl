#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR_FILE="/usr/local/bin/.ChromeOS_PowerControl.install_dir"
if [ -f "$INSTALL_DIR_FILE" ]; then
    INSTALL_DIR=$(cat "$INSTALL_DIR_FILE")
else
    INSTALL_DIR="/usr/local/bin/ChromeOS_PowerControl"
fi
INSTALL_DIR="${INSTALL_DIR%/}"

CONFIG_FILE="$INSTALL_DIR/config.sh"
LOG_FILE="/var/log/powercontrol.log"
RUN_FLAG="$INSTALL_DIR/.powercontrol_enabled"
PID_FILE="$INSTALL_DIR/.powercontrol_pid"
VERSION_FILE="$INSTALL_DIR/version"
CPU_VENDOR=$(grep -m1 'vendor_id' /proc/cpuinfo | awk '{print $3}' || echo "unknown")
MONITOR_PID_FILE="$INSTALL_DIR/.powercontrol_tail_fan_monitor.pid"
PERF_PATH=""
TURBO_PATH=""
IS_AMD=0
IS_INTEL=0
IS_ARM=0

detect_cpu_type() {
    case "$CPU_VENDOR" in
        GenuineIntel)
            IS_INTEL=1
            if [ -f "/sys/devices/system/cpu/intel_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
                TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
            fi
            ;;
        AuthenticAMD)
            IS_AMD=1
            if [ -f "/sys/devices/system/cpu/amd_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/amd_pstate/max_perf_pct"
            else
                PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            fi
            ;;
        *)
            IS_ARM=1
            PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            ;;
    esac
}

    DEFAULT_MIN_TEMP=60
    DEFAULT_MAX_TEMP=85
    DEFAULT_MIN_PERF_PCT=40
    DEFAULT_MAX_PERF_PCT=100
    DEFAULT_RAMP_UP=15
    DEFAULT_RAMP_DOWN=20
    MAX_TEMP_LIMIT=90

    MAX_TEMP=""
    MAX_PERF_PCT=""
    MIN_TEMP=""
    MIN_PERF_PCT=""
    RAMP_UP=""
    RAMP_DOWN=""

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo "Creating default configuration..."
        MIN_TEMP=${MIN_TEMP:-$DEFAULT_MIN_TEMP}
        MAX_TEMP=${MAX_TEMP:-$DEFAULT_MAX_TEMP}
        MIN_PERF_PCT=${MIN_PERF_PCT:-$DEFAULT_MIN_PERF_PCT}
        MAX_PERF_PCT=${MAX_PERF_PCT:-$DEFAULT_MAX_PERF_PCT}
        RAMP_UP=${RAMP_UP:-$DEFAULT_RAMP_UP}
        RAMP_DOWN=${RAMP_DOWN:-$DEFAULT_RAMP_DOWN}
        validate_config
    fi
}

validate_config() {
    # Set defaults if empty
    if [[ -z "$MAX_TEMP" ]]; then MAX_TEMP=$DEFAULT_MAX_TEMP; fi
    if [[ -z "$MIN_TEMP" ]]; then MIN_TEMP=$DEFAULT_MIN_TEMP; fi
    if [[ -z "$MAX_PERF_PCT" ]]; then MAX_PERF_PCT=$DEFAULT_MAX_PERF_PCT; fi
    if [[ -z "$MIN_PERF_PCT" ]]; then MIN_PERF_PCT=$DEFAULT_MIN_PERF_PCT; fi
    if [[ -z "$RAMP_UP" ]]; then RAMP_UP=$DEFAULT_RAMP_UP; fi
    if [[ -z "$RAMP_DOWN" ]]; then RAMP_DOWN=$DEFAULT_RAMP_DOWN; fi

    # Clamp temps to limits
    if (( MAX_TEMP > MAX_TEMP_LIMIT )); then
        echo "Warning: MAX_TEMP exceeds limit ($MAX_TEMP_LIMIT), resetting."
        MAX_TEMP=$DEFAULT_MAX_TEMP
    fi

    if (( MIN_TEMP >= MAX_TEMP )); then
        echo "Warning: MIN_TEMP >= MAX_TEMP, adjusting."
        MIN_TEMP=$(( MAX_TEMP - 10 ))
    fi

    # Clamp perf pct to [10..100]
    if (( MIN_PERF_PCT < 10 )); then
        echo "Warning: MIN_PERF_PCT below 10, resetting."
        MIN_PERF_PCT=10
    elif (( MIN_PERF_PCT > 100 )); then
        echo "Warning: MIN_PERF_PCT above 100, resetting."
        MIN_PERF_PCT=100
    fi

    if (( MAX_PERF_PCT < 10 )); then
        echo "Warning: MAX_PERF_PCT below 10, resetting."
        MAX_PERF_PCT=10
    elif (( MAX_PERF_PCT > 100 )); then
        echo "Warning: MAX_PERF_PCT above 100, resetting."
        MAX_PERF_PCT=100
    fi

    if (( MAX_PERF_PCT < MIN_PERF_PCT )); then
        echo "Warning: MAX_PERF_PCT < MIN_PERF_PCT, adjusting."
        if (( MIN_PERF_PCT <= 90 )); then
            MAX_PERF_PCT=$(( MIN_PERF_PCT + 10 ))
        else
            MAX_PERF_PCT=100
        fi
    fi
}

save_config() {
    validate_config

    sed -i "s/^MAX_TEMP=.*/MAX_TEMP=$MAX_TEMP/" "$CONFIG_FILE" || echo "MAX_TEMP=$MAX_TEMP" >> "$CONFIG_FILE"
    sed -i "s/^MIN_TEMP=.*/MIN_TEMP=$MIN_TEMP/" "$CONFIG_FILE" || echo "MIN_TEMP=$MIN_TEMP" >> "$CONFIG_FILE"
    sed -i "s/^MAX_PERF_PCT=.*/MAX_PERF_PCT=$MAX_PERF_PCT/" "$CONFIG_FILE" || echo "MAX_PERF_PCT=$MAX_PERF_PCT" >> "$CONFIG_FILE"
    sed -i "s/^MIN_PERF_PCT=.*/MIN_PERF_PCT=$MIN_PERF_PCT/" "$CONFIG_FILE" || echo "MIN_PERF_PCT=$MIN_PERF_PCT" >> "$CONFIG_FILE"

    source "$INSTALL_DIR/config.sh"
}


load_config

 get_temp() {
    local temp_celsius
    temp_celsius=$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null)

    if [[ -n "$temp_celsius" && "$temp_celsius" =~ ^[0-9]+$ ]]; then
        temp_c=$((temp_celsius / 1000))
        echo "$temp_c"
    else
        echo "Failed to get temperature." >&2
        return 1
    fi
}


set_max_perf_pct() {
    local pct=$1
    load_config
    if (( IS_INTEL == 1 || IS_AMD == 1 )) && [[ "$PERF_PATH" == *max_perf_pct ]]; then
        if [ -w "$PERF_PATH" ]; then
            echo "$pct" | tee "$PERF_PATH" > /dev/null
        else
            echo "${RED}Permission denied: Cannot write to $PERF_PATH${RESET}" >&2
            exit 1
        fi
   elif (( IS_AMD == 1 || IS_ARM == 1 )); then
        local max_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/cpuinfo_max_freq)
        local min_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/cpuinfo_min_freq)
        local target_freq=$(( min_freq + (max_freq - min_freq) * pct / 100 ))

        if [ -w "$PERF_PATH" ]; then
            echo "$target_freq" | tee "$PERF_PATH" > /dev/null
        else
            echo "${RED}Permission denied: Cannot write to $PERF_PATH${RESET}" >&2
            exit 1
        fi
        save_config
    fi
}


set_temp_threshold() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Temperature threshold must be an integer."
        exit 1
    fi
    if (( $1 > MAX_TEMP_LIMIT )); then
        echo "Error: Temperature threshold cannot exceed $MAX_TEMP_LIMIT째C."
        exit 1
    fi
    load_config
    MAX_TEMP=$1
    save_config
    echo "Max temperature threshold set to $MAX_TEMP째C"
}

set_min_temp() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Min temperature must be an integer."
        exit 1
    fi
    load_config
    MIN_TEMP=$1
    save_config
    echo "Min temperature threshold set to $MIN_TEMP째C"
}

set_min_perf_pct() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: min_perf_pct must be an integer."
        exit 1
    fi
    if (( $1 < 10 || $1 > 100 )); then
        echo "Error: min_perf_pct must be between 10 and 100."
        exit 1
    fi
    load_config
    MIN_PERF_PCT=$1
    save_config
    echo "Minimum performance percentage set to $MIN_PERF_PCT%" | tee -a "$LOG_FILE"
}

set_no_turbo() {
    local value="$1"
    if [[ "$value" != "0" && "$value" != "1" ]]; then
        echo "Usage: $0 no_turbo 0 or 1"
        exit 1
    fi

    if [ "$IS_INTEL" -eq 1 ] && [ -w "$TURBO_PATH" ]; then
        echo "$value" | sudo tee "$TURBO_PATH" > /dev/null
        if [ "$value" -eq 1 ]; then
            echo "Intel Turbo Boost ${CYAN}Disabled${RESET}" | tee -a "$LOG_FILE"
        else
            echo "Intel Turbo Boost ${CYAN}Enabled${RESET}" | tee -a "$LOG_FILE"
        fi
    elif [ "$IS_AMD" -eq 1 ]; then
        echo "Turbo disable is not directly supported on AMD via no_turbo."
        echo "Adjusting max frequency instead. Use max_perf_pct or manual tuning."
    else
        echo "Turbo control is unsupported on this platform (likely ARM)."
    fi
}

cleanup() {
    stop_monitoring
    exit 0
}

start_monitoring_loop() {
    load_config
    detect_cpu_type
    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"

    last_reload_time=0
    cooldown_mode=false
    last_pct=0

    while [ -f "$RUN_FLAG" ]; do
        now=$(date +%s)
        if (( now - last_reload_time >= 10 )); then
            load_config
            validate_config
            min_temp_c=$MIN_TEMP
            high_temp_c=$MAX_TEMP
            min_perf_pct=$MIN_PERF_PCT
            max_perf_pct=$MAX_PERF_PCT
            ramp_up=$RAMP_UP
            ramp_down=$RAMP_DOWN
            last_reload_time=$now
        fi

        temp_c=$(get_temp)
        if [ $? -ne 0 ] || [ -z "$temp_c" ]; then
            echo "Failed to get temperature. Retrying..."
            sleep 1
            continue
        fi

        current_pct=$(cat "$PERF_PATH" 2>/dev/null || echo "0")

        if (( temp_c >= high_temp_c )); then
            # Begin cooldown mode with gradual ramp down
            if [ "$cooldown_mode" = false ]; then
                cooldown_mode=true
                last_pct=$current_pct
            fi
            pct=$(( last_pct - ramp_down ))
            if (( pct < min_perf_pct )); then
                pct=$min_perf_pct
            fi
            last_pct=$pct

        elif (( temp_c <= min_temp_c )); then
            # Ramp up slowly when temp is back to safe
            if [ "$cooldown_mode" = true ]; then
                cooldown_mode=false
                last_pct=$min_perf_pct
            fi
            pct=$(( last_pct + ramp_up ))
            if (( pct > max_perf_pct )); then
                pct=$max_perf_pct
            fi
            last_pct=$pct

        else
            # In normal range, scale linearly
            cooldown_mode=false
            delta_c=$(( high_temp_c - min_temp_c ))
            temp_offset=$(( temp_c - min_temp_c ))
            reduction=$(( (max_perf_pct - min_perf_pct) * temp_offset / delta_c ))
            pct=$(( max_perf_pct - reduction ))
            last_pct=$pct
        fi

        if [[ "$current_pct" != "$pct" ]]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - CPU ${temp_c}째C -> Clockspeed ${pct}%" >> "$LOG_FILE"
            set_max_perf_pct "$pct"
        fi

        sleep 1
    done

    echo "${YELLOW}PowerControl stopped.${RESET}" | tee -a "$LOG_FILE"
    rm -f "$PID_FILE"
}

show_status() {
    CPU_VENDOR=$(grep -m1 'vendor_id' /proc/cpuinfo | awk '{print $3}' || echo "unknown")
    PERF_PATH=""
    TURBO_PATH=""
    IS_AMD=0
    IS_INTEL=0
    IS_ARM=0

    case "$CPU_VENDOR" in
        GenuineIntel)
            IS_INTEL=1
            PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
            TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
            ;;
        AuthenticAMD)
            IS_AMD=1
            if [ -f "/sys/devices/system/cpu/amd_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/amd_pstate/max_perf_pct"
            else
                PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            fi
            ;;
        *)
            IS_ARM=1
            PERF_PATH="/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq"
            ;;
    esac

    #PowerControl Status

    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            echo "${GREEN}PowerControl Status: RUNNING (PID $PID)${RESET}"
            echo ""
        else
            rm -f "$PID_FILE"
            rm -f "$RUN_FLAG"
            echo "${YELLOW}PowerControl Status: STOPPED ${RESET}"
        fi
    else
        echo "${YELLOW}PowerControl Status: STOPPED ${RESET}"
    fi
    temp_c=$(get_temp)
    echo "Current CPU temp: $temp_c째C"
    echo "Configured max_temp: $MAX_TEMP째C"
    echo "Configured min_temp: $MIN_TEMP째C"
    echo "Configured max_perf_pct: $MAX_PERF_PCT%"
    echo "Configured min_perf_pct: $MIN_PERF_PCT%"
    echo "Configured ramp_up pct: $RAMP_UP%"
    echo "Configured ramp_down pct: $RAMP_DOWN%"

    if [ -f "$PERF_PATH" ]; then
        current_val=$(cat "$PERF_PATH")
        if [[ "$PERF_PATH" == *max_perf_pct ]]; then
            echo "Current max_perf_pct: $current_val%"
        else
            echo "Current max frequency: $((current_val / 1000)) MHz"
        fi
    else
        echo "${RED}max_perf_pct/frequency path not found.${RESET}"
    fi

    if [ "$IS_INTEL" -eq 1 ] && [ -f "$TURBO_PATH" ]; then
        turbo_val=$(cat "$TURBO_PATH")
        if [[ "$turbo_val" -eq 1 ]]; then
            echo "Turbo Boost: Disabled"
        else
            echo "Turbo Boost: Enabled"
        fi
    elif [ "$IS_AMD" -eq 1 ]; then
        echo "Turbo Boost: Control unavailable via no_turbo path on AMD."
    else
        echo "Turbo Boost: Not supported on this platform."
    fi

    echo
}

# display cpu temp in status
if [ $# -eq 0 ]; then
    show_status
    exit 0
fi

stop_monitoring() {
    if [ -n "$POWERCONTROL_STOPPING" ]; then
        return
    fi
    POWERCONTROL_STOPPING=1

    if [ ! -f "$PID_FILE" ]; then
        return
    fi

    PID=$(cat "$PID_FILE")
    if ps -p "$PID" > /dev/null 2>&1; then
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Stopping PowerControl (PID $PID)...${RESET}"  | tee -a "$LOG_FILE"
        rm -f "$RUN_FLAG"
        kill "$PID"

        for i in {1..10}; do
            if ! ps -p "$PID" > /dev/null 2>&1; then
                echo "PowerControl stopped."
                rm -f "$PID_FILE"
                return
            fi
            sleep 1
        done
        kill -9 "$PID"
        rm -f "$PID_FILE"
    else
        rm -f "$PID_FILE"
        rm -f "$RUN_FLAG"
    fi
}

uninstall_script() {
    if [ -z "$INSTALL_DIR" ]; then
        echo "Error: INSTALL_DIR is not set."
        exit 1
    fi

    local script="$INSTALL_DIR/Uninstall_ChromeOS_PowerControl.sh"

    if [ -d "$INSTALL_DIR" ]; then
        if [ -x "$script" ]; then
            echo "Uninstalling ChromeOS PowerControl..."
            sudo bash "$script"
        else
            echo "${RED}Uninstall script not found or not executable at: $script${RESET}"
            exit 1
        fi
    else
        echo "${RED}Installation directory not found: $INSTALL_DIR${RESET}"
        exit 1
    fi
}

show_help() {
    echo "${CYAN}"
    echo "PowerControl commands with examples:"
    echo ""
echo "sudo powercontrol                     # Show status"
echo "sudo powercontrol start               # Throttle CPU based on temperature curve"
echo "sudo powercontrol stop                # Restore default CPU settings"
echo "sudo powercontrol no_turbo 1          # 0 = Enable, 1 = Disable Turbo Boost"
echo "sudo powercontrol max_perf_pct 75     # Set max performance percentage"
echo "sudo powercontrol min_perf_pct 50     # Set minimum performance at max temp"
echo "sudo powercontrol max_temp 86         # Max temperature threshold - Limit is 90 C"
echo "sudo powercontrol min_temp 60         # Min temperature threshold"
echo "sudo powercontrol ramp_up 15          # % in steps CPU will increase in clockspeed per second"
echo "sudo powercontrol ramp_down 20        # % in steps CPU will decrease in clockspeed per second"
echo "sudo powercontrol monitor             # Toggle live temperature monitoring"
echo "sudo powercontrol startup             # Copy or Remove no_turbo.conf & powercontrol.conf at: /etc/init/"
echo "sudo powercontrol reinstall           # Redownload and reinstall ChromeOS_PowerControl from Github"
echo "sudo powercontrol uninstall           # Uninstall ChromeOS_PowerControl"
echo "sudo powercontrol version             # Check PowerControl version"
echo "sudo powercontrol help                # Help menu${RESET}"
echo ""
}

max_perf_pct() {
    if [ -z "$2" ]; then
        if [ -f "$PERF_PATH" ]; then
            current_pct=$(cat "$PERF_PATH")
            echo "Current max_perf_pct: $current_pct%"
        else
            echo "${RED}max_perf_pct path not found: $PERF_PATH${RESET}"
            exit 1
        fi
    else
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
            echo "${RED}Error: max_perf_pct value must be an integer.${RESET}"
            exit 1
        fi

        if (( $2 < 10 || $2 > 100 )); then
            echo "${RED}Error: max_perf_pct must be between 10 and 100.${RESET}"
            exit 1
        fi

        MAX_PERF_PCT=$2
        save_config
        echo "Setting max_perf_pct to $MAX_PERF_PCT%" | tee -a "$LOG_FILE"
        set_max_perf_pct "$MAX_PERF_PCT"
    fi
}

case "$1" in
   start)
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Initializing config file with default values..."
        load_config
    fi

    stop_monitoring >/dev/null 2>&1

    LOG_FILE="/var/log/powercontrol.log"

    # Truncate log if > 32KB
    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 32KB)" > "$LOG_FILE"
    fi

    if pgrep -f "$0 __monitor__" >/dev/null; then
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Monitor is already running. Showing live output...${RESET}" | tee -a "$LOG_FILE"
        tail -n 20 -f "$LOG_FILE"
    else
        nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
        echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - Starting PowerControl - Output is logged to $LOG_FILE${RESET}" | tee -a "$LOG_FILE"
    fi
    ;;


    stop)
        stop_monitoring
        ;;
    max_temp)
        set_temp_threshold "$2"
        ;;
    min_temp)
        set_min_temp "$2"
        ;;
    min_perf_pct)
        set_min_perf_pct "$2"
        ;;
    max_perf_pct)
        max_perf_pct "$@"
        ;;
    no_turbo)
        set_no_turbo "$2"
        ;;
    uninstall)
        uninstall_script
        ;;
    help)
        show_help
        ;;
  monitor)
    LOG_FILE="/var/log/powercontrol.log"
    MONITOR_PID_FILE="$INSTALL_DIR/.powercontrol_tail_monitor.pid"

    if [ -f "$MONITOR_PID_FILE" ]; then
        MONITOR_PID=$(cat "$MONITOR_PID_FILE")
        if ps -p "$MONITOR_PID" > /dev/null 2>&1; then
            echo "Stopping monitor (PID $MONITOR_PID)..."
            kill "$MONITOR_PID"
            rm -f "$MONITOR_PID_FILE"
            exit 0
        else
            rm -f "$MONITOR_PID_FILE"
        fi
    fi

    tail -fn +1 "$LOG_FILE" &
    echo $! > "$MONITOR_PID_FILE"
    echo "Monitor started (PID $!)"
    ;;
     startup)
    CONF_SOURCE="$INSTALL_DIR/powercontrol.conf"
    CONF_TARGET="/etc/init/powercontrol.conf"
    CONF_SOURCE_NO_TURBO="$INSTALL_DIR/no_turbo.conf"
    
    if [ "$IS_INTEL" -eq 1 ]; then
        read -p "Do you want to disable Turbo Boost automatically on startup? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if [ -f "$CONF_SOURCE_NO_TURBO" ]; then
                echo "Copying no_turbo.conf to /etc/init/..."
                sudo cp "$CONF_SOURCE_NO_TURBO" "/etc/init/"
                echo "${GREEN}no_turbo.conf copied.${RESET}"
            else
                echo "Intel Turbo Boost will start automatically."
                sudo rm -f /etc/init/no_turbo.conf
            fi
        else
            echo "Intel Turbo Boost enabled on startup."
            sudo rm -r /etc/init/no_turbo.conf
        fi
    fi

    read -p "Do you want PowerControl to startup automatically on boot? (y/n): " choice
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        if [ -f "$CONF_SOURCE" ]; then
            echo "Copying powercontrol.conf to /etc/init/..."
            sudo cp "$CONF_SOURCE" "$CONF_TARGET"
            echo "${GREEN}powercontrol.conf copied.${RESET}"
        else
            echo "${RED}powercontrol.conf not found at $CONF_SOURCE${RESET}"
        fi
    else
        echo "PowerControl will not startup automatically on boot."
        sudo rm -f /etc/init/powercontrol.conf
    fi
    ;;
      ramp_up)
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        if (( $2 < 1 || $2 > 100 )); then
            echo "Error: ramp_up must be between 1 and 100"
            exit 1
        fi
        sed -i "s/^RAMP_UP=.*/RAMP_UP=$2/" "$CONFIG_FILE"
        echo "RAMP_UP set to $2%"
    else
        echo "Error: ramp_up must be between 1 and 100"
        exit 1
    fi
    ;;
  ramp_down)
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        if (( $2 < 1 || $2 > 100 )); then
            echo "Error: ramp_down must be between 1 and 100"
            exit 1
        fi
        sed -i "s/^RAMP_DOWN=.*/RAMP_DOWN=$2/" "$CONFIG_FILE"
        echo "RAMP_DOWN set to $2%"
    else
        echo "Error: ramp_down must be between 1 and 100"
        exit 1
    fi
    ;;
     version)
    if [[ -f "$VERSION_FILE" ]]; then
        echo "$(cat "$VERSION_FILE")"
    else
        echo "Version file not found."
        exit 1
    fi
    ;;
    reinstall)
    echo "Downloading to:${CYAN} /home/chronos/ChromeOS_PowerControl_Installer.sh $RESET"
    curl -L https://raw.githubusercontent.com/shadowed1/ChromeOS_PowerControl/beta/ChromeOS_PowerControl_Installer.sh -o /home/chronos/ChromeOS_PowerControl_Installer.sh
    echo "Running commands:"
    echo ""
    sudo mkdir -p /usr/local/bin
    echo "sudo mkdir -p /usr/local/bin"
    sudo mv /home/chronos/ChromeOS_PowerControl_Installer.sh /usr/local/bin
    echo "sudo mv /home/chronos/ChromeOS_PowerControl_Installer.sh /usr/local/bin"
    echo "sudo bash /usr/local/bin/ChromeOS_PowerControl_Installer.sh"
    sudo bash /usr/local/bin/ChromeOS_PowerControl_Installer.sh
    ;;
    __monitor__)
        LOG_FILE="/var/log/powercontrol.log"
        start_monitoring_loop
        ;;
    *)
        show_status
        ;;
esac
