#!/bin/bash

CONFIG_FILE="$HOME/.powercontrol_config"
RUN_FLAG="$HOME/.powercontrol_enabled"
PID_FILE="$HOME/.powercontrol_pid"
PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
TEMP_SENSOR_ID=2

DEFAULT_MAX_TEMP_K=358
DEFAULT_MAX_PERF_PCT=80
MAX_TEMP_LIMIT_K=363

MAX_TEMP_K=
MAX_PERF_PCT=

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        MAX_TEMP_K=$DEFAULT_MAX_TEMP_K
        MAX_PERF_PCT=$DEFAULT_MAX_PERF_PCT
        save_config
    fi
}

save_config() {
    echo "MAX_TEMP_K=$MAX_TEMP_K" > "$CONFIG_FILE"
    echo "MAX_PERF_PCT=$MAX_PERF_PCT" >> "$CONFIG_FILE"
}

get_temp_kelvin() {
    ectool temps $TEMP_SENSOR_ID 2>/dev/null | awk '/K/ {print $1}'
}

set_max_perf_pct() {
    local pct=$1
    if [ -w "$PERF_PATH" ]; then
        echo "$pct" | tee "$PERF_PATH" > /dev/null
    else
        echo "Permission denied: Cannot write to $PERF_PATH" >&2
        exit 1
    fi
}

set_temp_threshold() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Temperature threshold must be an integer (Kelvin)."
        exit 1
    fi
    if (( $1 > MAX_TEMP_LIMIT_K )); then
        echo "Error: Temperature threshold cannot exceed 90Â°C ($MAX_TEMP_LIMIT_K K)."
        exit 1
    fi
    MAX_TEMP_K=$1
    save_config
    echo "Max temperature threshold set to $MAX_TEMP_K K"
}

start_monitoring_loop() {
    if [ -f "$RUN_FLAG" ]; then
        echo "PowerControl is already running."
        exit 1
    fi

    load_config

    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"
    echo "Starting PowerControl (PID $$)."

    throttled=0

    while [ -f "$RUN_FLAG" ]; do
        temp_k=$(get_temp_kelvin)
        if ! [[ "$temp_k" =~ ^[0-9]+$ ]]; then
            echo "Failed to read temperature sensor $TEMP_SENSOR_ID."
            sleep 1
            continue
        fi

        if (( MAX_TEMP_K <= 0 )); then
            current_pct=$(cat "$PERF_PATH" 2>/dev/null || echo "0")
            if [[ "$current_pct" != "$MAX_PERF_PCT" ]]; then
                echo "Temp throttling disabled -> Setting max_perf_pct to $MAX_PERF_PCT%"
                set_max_perf_pct "$MAX_PERF_PCT"
            fi
            throttled=0
        else
            restore_temp_k=$(( MAX_TEMP_K - 5 ))
            current_pct=$(cat "$PERF_PATH" 2>/dev/null || echo "0")

            if (( temp_k >= MAX_TEMP_K )); then
                if (( throttled == 0 || current_pct != 50 )); then
                    echo "Temperature $temp_k K >= max threshold $MAX_TEMP_K K -> Throttling CPU (50%)"
                    set_max_perf_pct 50
                    throttled=1
                fi
            elif (( temp_k <= restore_temp_k )); then
                if (( throttled == 1 || current_pct != MAX_PERF_PCT )); then
                    echo "Temperature $temp_k K <= restore threshold $restore_temp_k K -> Restoring max_perf_pct to $MAX_PERF_PCT%"
                    set_max_perf_pct "$MAX_PERF_PCT"
                    throttled=0
                fi
            fi
        fi

        sleep 1
    done

    echo "PowerControl stopped."
    rm -f "$PID_FILE"
}

case "$1" in
    start)
        start_monitoring_loop
        ;;
    stop)
        if [ -f "$RUN_FLAG" ]; then
            rm -f "$RUN_FLAG"
            echo "Stopping PowerControl..."
        else
            echo "PowerControl is not running."
        fi
        ;;
    settemp)
        if [ -z "$2" ]; then
            echo "Usage: $0 settemp <temp_in_Kelvin>"
            exit 1
        fi
        set_temp_threshold "$2"
        ;;
    *)
        echo "Usage: $0 {start|stop|settemp}"
        exit 1
        ;;
esac
