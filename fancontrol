#!/bin/bash

CONFIG_FILE="/usr/local/bin/ChromeOS_PowerControl/fancontrol.conf"
ZONE_PATH="/sys/class/thermal/thermal_zone0/temp"
RUN_FLAG="/tmp/.fan_curve_running"
PID_FILE="/tmp/.fan_curve_pid"
LOG_FILE="/usr/local/bin/ChromeOS_PowerControl/fancontrol.log"
MONITOR_PID_FILE="/tmp/powercontrol_tail_fan_monitor.pid"

# Default values
DEFAULT_MIN_TEMP=48
DEFAULT_MAX_TEMP=81
DEFAULT_MIN_FAN=0
DEFAULT_MAX_FAN=100
DEFAULT_SLEEP_INTERVAL=3
DEFAULT_STEP_UP=20
DEFAULT_STEP_DOWN=1

SLEEP_INTERVAL=$DEFAULT_SLEEP_INTERVAL
STEP_UP=$DEFAULT_STEP_UP
STEP_DOWN=$DEFAULT_STEP_DOWN

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        MIN_TEMP=$DEFAULT_MIN_TEMP
        MAX_TEMP=$DEFAULT_MAX_TEMP
        MIN_FAN=$DEFAULT_MIN_FAN
        MAX_FAN=$DEFAULT_MAX_FAN
        SLEEP_INTERVAL=$DEFAULT_SLEEP_INTERVAL
        STEP_UP=$DEFAULT_STEP_UP
        STEP_DOWN=$DEFAULT_STEP_DOWN
        save_config
    fi
}

save_config() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    cat > "$CONFIG_FILE" <<EOF
MIN_TEMP=$MIN_TEMP
MAX_TEMP=$MAX_TEMP
MIN_FAN=$MIN_FAN
MAX_FAN=$MAX_FAN
SLEEP_INTERVAL=$SLEEP_INTERVAL
STEP_UP=$STEP_UP
STEP_DOWN=$STEP_DOWN
EOF
}

# === Fan logic with hysteresis ===
cleanup() {
    echo "Restoring automatic fan control..." | tee -a "$LOG_FILE"
    sudo ectool autofanctrl
    rm -f "$RUN_FLAG" "$PID_FILE"
    exit 0
}

run_loop() {
    sudo ectool autofanctrl
    echo "Fan curve started. Press Ctrl+C to stop." | tee -a "$LOG_FILE"

    local last_duty=-1

    while [ -f "$RUN_FLAG" ]; do
        if [ ! -f "$ZONE_PATH" ]; then
            echo "Thermal zone not found: $ZONE_PATH" | tee -a "$LOG_FILE"
            cleanup
        fi

        load_config

        RAW_TEMP=$(cat "$ZONE_PATH")
        TEMP_C=$((RAW_TEMP / 1000))

        if (( TEMP_C <= MIN_TEMP )); then
            DUTY=$MIN_FAN
        elif (( TEMP_C >= MAX_TEMP )); then
            DUTY=$MAX_FAN
        else
            RANGE=$((MAX_TEMP - MIN_TEMP))
            OFFSET=$((TEMP_C - MIN_TEMP))
            DUTY=$((MIN_FAN + (OFFSET * (MAX_FAN - MIN_FAN) / RANGE)))
        fi

        # Apply hysteresis / gradual ramping with asymmetric steps
        if (( last_duty < 0 )); then
            target_duty=$DUTY
        else
            target_duty=$DUTY
            if (( target_duty > last_duty + STEP_UP )); then
                target_duty=$((last_duty + STEP_UP))
            elif (( target_duty < last_duty - STEP_DOWN )); then
                target_duty=$((last_duty - STEP_DOWN))
            fi
        fi

        KICKSTART_DUTY=50

        echo "Temp: ${TEMP_C}°C -> Fan Duty: ${target_duty}%" >> "$LOG_FILE"

        if (( last_duty > 0 && target_duty == 0 )); then
            echo "Applying kickstart at ${KICKSTART_DUTY}% before setting to 0%" >> "$LOG_FILE"
            sudo ectool fanduty "$KICKSTART_DUTY"
            sleep 1
            sudo ectool fanduty 0
        else
            sudo ectool fanduty "$target_duty"
        fi

        last_duty=$target_duty

        sleep "$SLEEP_INTERVAL"
    done

    cleanup
}

# === Start / Stop / Monitor ===
start() {
    "$0" stop >/dev/null 2>&1

    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
        echo "Truncated log file (exceeded 32KB)" > "$LOG_FILE"
    fi

    nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
    echo "FanControl started in background. Output is logged to $LOG_FILE"
}

stop() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        echo "Stopping fan curve (PID $PID)..." | tee -a "$LOG_FILE"
        rm -f "$RUN_FLAG"
        kill "$PID" 2>/dev/null
        sleep 1
    fi
    sudo ectool fanduty 50
    sleep 1
    echo "Restoring automatic fan control..." | tee -a "$LOG_FILE"
    sudo ectool autofanctrl
    rm -f "$RUN_FLAG" "$PID_FILE"
}

monitor() {
    if [ -f "$MONITOR_PID_FILE" ]; then
        MONITOR_PID=$(cat "$MONITOR_PID_FILE")
        if ps -p "$MONITOR_PID" > /dev/null 2>&1; then
            echo "Stopping monitor (PID $MONITOR_PID)..."
            kill "$MONITOR_PID"
            rm -f "$MONITOR_PID_FILE"
            exit 0
        else
            echo "Stale PID file found. Removing."
            rm -f "$MONITOR_PID_FILE"
        fi
    fi

    tail -fn +1 "$LOG_FILE" &
    echo $! > "$MONITOR_PID_FILE"
    echo "Monitor started (PID $!)"
}

# === Config Setters ===
set_min_temp() {
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        load_config
        MIN_TEMP=$2
        save_config
        echo "Min temp set to $MIN_TEMP°C"
    else
        echo "Usage: $0 min_temp <number>"
    fi
}

set_max_temp() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 <= 90 )); then
        load_config
        MAX_TEMP=$2
        save_config
        echo "Max temp set to $MAX_TEMP°C"
    else
        echo "Usage: $0 max_temp <number (<=90)>"
    fi
}

set_min_fan() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 0 && $2 <= 100 )); then
        load_config
        if (( MAX_FAN > $2 )); then
            MIN_FAN=$2
            save_config
            echo "Min fan set to $MIN_FAN%"
        else
            echo "Error: MIN_FAN must be less than MAX_FAN ($MAX_FAN)"
        fi
    else
        echo "Usage: $0 min_fan <0-100>"
    fi
}

set_max_fan() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 0 && $2 <= 100 )); then
        load_config
        if (( $2 > MIN_FAN )); then
            MAX_FAN=$2
            save_config
            echo "Max fan set to $MAX_FAN%"
        else
            echo "Error: MAX_FAN must be greater than MIN_FAN ($MIN_FAN)"
        fi
    else
        echo "Usage: $0 max_fan <0-100>"
    fi
}

set_sleep_interval() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 && $2 <= 10 )); then
        load_config
        SLEEP_INTERVAL=$2
        save_config
        echo "Sleep interval set to $SLEEP_INTERVAL seconds"
    else
        echo "Usage: $0 update <sleep_interval_seconds (1-10)>"
    fi
}

set_stepup() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 && $2 <= 100 )); then
        load_config
        STEP_UP=$2
        save_config
        echo "Step-up size set to $STEP_UP%"
    else
        echo "Usage: $0 stepup <step_size_percent (1-100)>"
    fi
}

set_stepdown() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 && $2 <= 100 )); then
        load_config
        STEP_DOWN=$2
        save_config
        echo "Step-down size set to $STEP_DOWN%"
    else
        echo "Usage: $0 stepdown <step_size_percent (1-100)>"
    fi
}

show_help() {
    load_config
    echo "FanControl Script - Available Commands:"
    echo
    echo "  start             Start custom fan curve."
    echo "  stop              Stop fancontrol and restore autofanctrl"
    echo "  monitor           Toggle log monitor on/off"
    echo "  min_temp <°C>     Set minimum temperature (Celsius)"
    echo "  max_temp <°C>     Set maximum temperature (Celsius, max 90)"
    echo "  min_fan <0–100>   Set fan duty at min temp"
    echo "  max_fan <0–100>   Set fan duty at max temp (must be > min_fan)"
    echo "  update <seconds>  Set sleep interval between fan checks (1-10)"
    echo "  stepup <percent>  Set fan speed increase step size (1-100)"
    echo "  stepdown <percent> Set fan speed decrease step size (1-100)"
    echo "  help              Show this help message"
}

# === Entry Point ===
case "$1" in
    start) start ;;
    stop) stop ;;
    monitor) monitor ;;
    min_temp) set_min_temp "$@" ;;
    max_temp) set_max_temp "$@" ;;
    min_fan)  set_min_fan "$@" ;;
    max_fan)  set_max_fan "$@" ;;
    update)   set_sleep_interval "$@" ;;
    stepup)   set_stepup "$@" ;;
    stepdown) set_stepdown "$@" ;;
    __monitor__)
        echo $$ > "$PID_FILE"
        touch "$RUN_FLAG"
        run_loop
        ;;
    ""|status)
        load_config
        echo "FanControl Status:"
        if [ -f "$RUN_FLAG" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "  Status: ENABLED (PID $PID)"
            else
                echo "  Status: RUN FLAG PRESENT, but process not running"
            fi
        else
            echo "  Status: DISABLED"
        fi
        echo
        echo "Hardware Info:"
        echo
        sudo ectool pwmgetnumfans
        sudo ectool pwmgetfanrpm all
        echo "Fan curve: $MIN_TEMP°C = ${MIN_FAN}%, $MAX_TEMP°C = ${MAX_FAN}%"
        echo "Sleep interval: $SLEEP_INTERVAL seconds"
        echo "Step-up: $STEP_UP%, Step-down: $STEP_DOWN%"
        ;;
    help) show_help ;;
    *) echo "Unknown command: $1"; show_help ;;
esac
