#!/bin/bash

CONFIG_FILE="$HOME/.batterycontrol_config"
CHARGER_PATH="/sys/class/power_supply/CROS_USBPD_CHARGER0/online"
BATTERY_PATH="/sys/class/power_supply/BAT0/capacity"
RUN_FLAG="$HOME/.batterycontrol_enabled"
PID_FILE="$HOME/.batterycontrol_pid"
TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"

DEFAULT_CHARGE_MAX=77
DEFAULT_CHARGE_MIN=74

CHARGE_MAX=
CHARGE_MIN=

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
    fi
}

save_config() {
    echo "CHARGE_MAX=$CHARGE_MAX" > "$CONFIG_FILE"
    echo "CHARGE_MIN=$CHARGE_MIN" >> "$CONFIG_FILE"
}

set_thresholds() {
    if ! [[ "$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$ ]]; then
        echo "Error: Both thresholds must be integers."
        exit 1
    fi
    if [ "$1" -gt 100 ] || [ "$2" -lt 10 ]; then
        echo "Error: CHARGE_MAX cannot be more than 100, and CHARGE_MIN cannot be less than 10."
        exit 1
    fi
    if [ "$2" -ge "$1" ]; then
        echo "Error: CHARGE_MIN must be less than CHARGE_MAX."
        exit 1
    fi

    echo "Battery Charge Status: MAX=$1, MIN=$2"
    CHARGE_MAX=$1
    CHARGE_MIN=$2
    save_config
}

show_help() {
    echo "Battery Control Script - Available Commands:"
    echo
    echo "  help            Show this help message."
    echo "  set <MAX> <MIN> Set battery charge thresholds."
    echo "  start           Start BatteryControl monitoring."
    echo "  stop            Stop BatteryControl monitoring."
    echo "  status          Show BatteryControl status."
    echo "  no_turbo [1|0]  Toggle Intel Turbo Boost."
    echo "  uninstall       Run the uninstaller script."
    echo
}

show_status() {
    echo "BatteryControl Status:"

    if [ -f "$RUN_FLAG" ]; then
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "  BatteryControl is: ENABLED (running, PID $PID)"
            else
                echo "  BatteryControl is: ENABLED (but process is NOT running)"
            fi
        else
            echo "  BatteryControl is: ENABLED (PID not found)"
        fi
    else
        echo "  BatteryControl is: DISABLED"
    fi

    load_config
    echo "  CHARGE_MAX: $CHARGE_MAX"
    echo "  CHARGE_MIN: $CHARGE_MIN"

    if [ -f "$TURBO_PATH" ]; then
        TURBO_STATUS=$(cat "$TURBO_PATH")
        if [ "$TURBO_STATUS" -eq 1 ]; then
            echo "  Intel Turbo Boost: DISABLED (no_turbo = 1)"
        else
            echo "  Intel Turbo Boost: ENABLED (no_turbo = 0)"
        fi
    else
        echo "  Intel Turbo Boost status: Not available"
    fi
}

start_monitoring_loop() {
    touch "$RUN_FLAG"
    load_config
    echo $$ > "$PID_FILE"
    echo "BatteryControl monitoring started (PID $$)."

    while true; do
        if [ ! -f "$RUN_FLAG" ]; then
            echo "BatteryControl disabled, exiting monitoring loop."
            rm -f "$PID_FILE"
            exit 0
        fi

        if [ -f "$BATTERY_PATH" ]; then
            CHARGE=$(cat "$BATTERY_PATH" 2>/dev/null)
        else
            sleep 120
            continue
        fi

        if [ -f "$CHARGER_PATH" ]; then
            AC_ON=$(cat "$CHARGER_PATH" 2>/dev/null)
        else
            sleep 120
            continue
        fi

        if [ "$AC_ON" -eq 1 ]; then
            if [ "$CHARGE" -ge "$CHARGE_MAX" ]; then
                sudo ectool chargecontrol idle >/dev/null 2>&1
            elif [ "$CHARGE" -le "$CHARGE_MIN" ]; then
                sudo ectool chargecontrol normal >/dev/null 2>&1
            fi
        else
            sudo ectool chargecontrol normal >/dev/null 2>&1
        fi

        sleep 120
    done
}

stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "Stopped BatteryControl process (PID $PID)."
        fi
        rm -f "$PID_FILE"
    fi
    rm -f "$RUN_FLAG"
    echo "BatteryControl disabled."
}

case "$1" in
    set)
        set_thresholds "$2" "$3"
        ;;
    start)
        if [ -f "$RUN_FLAG" ] && [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "BatteryControl is already running (PID $PID)."
                exit 0
            else
                echo "Stale PID file found. Cleaning up and restarting..."
                rm -f "$PID_FILE"
            fi
        fi
        nohup "$0" __run_monitor__ > /dev/null 2>&1 &
        echo "BatteryControl started in the background."
        ;;
    __run_monitor__)
        start_monitoring_loop
        ;;
    stop)
        stop_monitoring
        ;;
    status)
        show_status
        ;;
    no_turbo)
        if [[ "$2" != "0" && "$2" != "1" ]]; then
            echo "Usage: $0 no_turbo [1|0]"
            exit 1
        fi
        if [ -w "$TURBO_PATH" ]; then
            echo "$2" | sudo tee "$TURBO_PATH" > /dev/null
            echo "Turbo Boost is now set to: $2"
        else
            echo "Permission denied or Turbo Boost control not available."
            exit 1
        fi
        ;;
    uninstall)
        if [ -x "/usr/local/bin/ChromeOS_BatteryControl/Uninstall_ChromeOS_BatteryControl.sh" ]; then
            sudo bash /usr/local/bin/ChromeOS_BatteryControl/Uninstall_ChromeOS_BatteryControl.sh
        else
            echo "Uninstall script not found or not executable."
            exit 1
        fi
        ;;
    help | --help | -h)
        show_help
        ;;
    "")
        show_status
        echo "Run 'batterycontrol start' to enable monitoring, or 'batterycontrol stop' to disable."
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$0 help' to see available commands."
        exit 1
        ;;
esac
