#!/bin/bash

# Define paths using the new install folder
INSTALL_DIR="/usr/local/bin/ChromeOS_PowerControl"
USER_HOME="/home/chronos"
CONFIG_FILE="$INSTALL_DIR/.batterycontrol_config"
CHARGER_PATH="/sys/class/power_supply/CROS_USBPD_CHARGER0/online"
BATTERY_PATH="/sys/class/power_supply/BAT0/capacity"
RUN_FLAG="$INSTALL_DIR/.batterycontrol_enabled"
PID_FILE="$INSTALL_DIR/.batterycontrol_pid"

DEFAULT_CHARGE_MAX=77
DEFAULT_CHARGE_MIN=74

CHARGE_MAX=
CHARGE_MIN=

# Load the configuration from the install directory
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

# Save the configuration to the install directory
save_config() {
    validate_config
    echo "CHARGE_MAX=$CHARGE_MAX" > "$CONFIG_FILE"
    echo "CHARGE_MIN=$CHARGE_MIN" >> "$CONFIG_FILE"
}

# Set the charge thresholds (max and min)
set_thresholds() {
    if ! [[ "$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$ ]]; then
        echo "Error: Both thresholds must be integers."
        exit 1
    fi
    if [ "$1" -gt 100 ] || [ "$2" -lt 10 ]; then
        echo "Error: CHARGE_MAX cannot be more than 100, and CHARGE_MIN cannot be less than 10."
        exit 1
    fi
    if [ "$2" -ge "$1" ]; then
        echo "Error: CHARGE_MIN must be less than CHARGE_MAX."
        exit 1
    fi

    load_config

    echo "Battery Charge Status: MAX=$1, MIN=$2"
    CHARGE_MAX=$1
    CHARGE_MIN=$2
    save_config
}

validate_config() {
    if [[ -z "$CHARGE_MAX" || ! "$CHARGE_MAX" =~ ^[0-9]+$ ]]; then
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
    fi
    if [[ -z "$CHARGE_MIN" || ! "$CHARGE_MIN" =~ ^[0-9]+$ ]]; then
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
    fi
    if (( CHARGE_MIN >= CHARGE_MAX )); then
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
    fi
}


# Show the help message
show_help() {
    echo "Battery Control Script - Available Commands:"
    echo
    echo "  help               Show this help message."
    echo "  set <MAX> <MIN>    Set battery charge thresholds."
    echo "  start              Start BatteryControl monitoring."
    echo "  stop               Stop BatteryControl monitoring."
    echo "  status             Show BatteryControl status."
    echo "  uninstall          Run the uninstaller script."
    echo
}

# Show the current status of BatteryControl
show_status() {
    echo "BatteryControl Status:"
    if [ -f "$RUN_FLAG" ]; then
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "  BatteryControl is: ENABLED (running, PID $PID)"
            else
                echo "  BatteryControl is: ENABLED (but process is NOT running)"
                rm -f "$PID_FILE"
            fi
        else
            echo "  BatteryControl is: ENABLED (PID not found)"
        fi
    else
        echo "  BatteryControl is: DISABLED"
    fi

    load_config
    echo "  CHARGE_MAX: $CHARGE_MAX"
    echo "  CHARGE_MIN: $CHARGE_MIN"
}

# Start the monitoring loop
start_monitoring_loop() {
    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"

    echo "BatteryControl started - keep it running for it to remain functioning. (PID $$)."

    while true; do
        if [ ! -f "$RUN_FLAG" ]; then
            echo "BatteryControl disabled, exiting monitoring loop."
            rm -f "$PID_FILE"
            exit 0
        fi

    load_config

        if [ -f "$BATTERY_PATH" ]; then
            CHARGE=$(cat "$BATTERY_PATH" 2>/dev/null)
        else
            sleep 10
            continue
        fi

        if [ -f "$CHARGER_PATH" ]; then
            AC_ON=$(cat "$CHARGER_PATH" 2>/dev/null)
        else
            sleep 10
            continue
        fi

        if [ "$AC_ON" -eq 1 ]; then
            if [ "$CHARGE" -ge "$CHARGE_MAX" ]; then
                sudo ectool chargecontrol idle >/dev/null 2>&1
            elif [ "$CHARGE" -le "$CHARGE_MIN" ]; then
                sudo ectool chargecontrol normal >/dev/null 2>&1
            fi
        else
            sudo ectool chargecontrol normal >/dev/null 2>&1
        fi

        sleep 10
    done
}

# Stop the monitoring loop
stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "Stopped BatteryControl process (PID $PID)."
        else
            echo "Process with PID $PID not found. Cleaning up stale PID file."
        fi
        rm -f "$PID_FILE"
    fi
    rm -f "$RUN_FLAG"
    echo "BatteryControl disabled."
}

# Main command handling
case "$1" in
    set)
        set_thresholds "$2" "$3"
        ;;
    start)
       stop_monitoring >/dev/null 2>&1

        # Start monitoring loop in background
       LOG_FILE="/usr/local/bin/ChromeOS_PowerControl/batterycontrol.log"

    # Truncate if it exceeds 32 KB
    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
    echo "Truncated log file (exceeded 32KB)" > "$LOG_FILE"
    fi

nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
echo "BatteryControl monitoring started in background. Output is logged to $LOG_FILE"

        ;;
    stop)
        stop_monitoring
        ;;
    status)
        show_status
        ;;
    uninstall)
        if [ -x "$INSTALL_DIR/Uninstall_ChromeOS_PowerControl.sh" ]; then
            sudo bash "$INSTALL_DIR/Uninstall_ChromeOS_PowerControl.sh"
        else
            echo "Uninstall script not found or not executable."
            exit 1
        fi
        ;;
    help | --help | -h)
        show_help
        ;;
    __monitor__)
        start_monitoring_loop
        ;;
    "")
        show_status
        echo
        echo "=== ectool battery ==="
        sudo ectool battery 2>/dev/null || echo "Failed to run ectool battery (is ectool installed and available?)"
        echo
        echo "Run 'batterycontrol start' to enable monitoring, or 'batterycontrol stop' to disable."
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$0 help' to see available commands."
        exit 1
        ;;
esac
