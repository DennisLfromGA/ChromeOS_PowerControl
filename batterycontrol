#!/bin/bash

CONFIG_FILE="$HOME/.batterycontrol_config"
CHARGER_PATH="/sys/class/power_supply/CROS_USBPD_CHARGER0/online"
BATTERY_PATH="/sys/class/power_supply/BAT0/capacity"
RUN_FLAG="$HOME/.batterycontrol_enabled"
PID_FILE="$HOME/.batterycontrol_pid"
TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
THERMAL_CONTROL_RUN_FLAG="$HOME/.thermalcontrol_enabled"
THERMAL_CONTROL_PID_FILE="$HOME/.thermalcontrol_pid"
CPU_TEMP_SENSOR=""

DEFAULT_CHARGE_MAX=77
DEFAULT_CHARGE_MIN=74

CHARGE_MAX=
CHARGE_MIN=

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
    fi
}

save_config() {
    echo "CHARGE_MAX=$CHARGE_MAX" > "$CONFIG_FILE"
    echo "CHARGE_MIN=$CHARGE_MIN" >> "$CONFIG_FILE"
}

set_thresholds() {
    if ! [[ "$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$ ]]; then
        echo "Error: Both thresholds must be integers."
        exit 1
    fi
    if [ "$1" -gt 100 ] || [ "$2" -lt 10 ]; then
        echo "Error: CHARGE_MAX cannot be more than 100, and CHARGE_MIN cannot be less than 10."
        exit 1
    fi
    if [ "$2" -ge "$1" ]; then
        echo "Error: CHARGE_MIN must be less than CHARGE_MAX."
        exit 1
    fi

    echo "Battery Charge Status: MAX=$1, MIN=$2"
    CHARGE_MAX=$1
    CHARGE_MIN=$2
    save_config
}

show_help() {
    echo "Battery Control Script - Available Commands:"
    echo
    echo "  help               Show this help message."
    echo "  set <MAX> <MIN>    Set battery charge thresholds."
    echo "  start              Start BatteryControl monitoring."
    echo "  stop               Stop BatteryControl monitoring."
    echo "  status             Show BatteryControl status."
    echo "  no_turbo [1|0]     Toggle Intel Turbo Boost."
    echo "  max_perf_pct <VAL> Set CPU max_perf_pct (performance cap 10–100%)."
    echo "  thermal_control <start|stop|status>   Start/stop/status thermal-based max_perf_pct scaling."
    echo "  uninstall          Run the uninstaller script."
    echo
}

show_status() {
    echo "BatteryControl Status:"

    if [ -f "$RUN_FLAG" ]; then
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "  BatteryControl is: ENABLED (running, PID $PID)"
            else
                echo "  BatteryControl is: ENABLED (but process is NOT running)"
            fi
        else
            echo "  BatteryControl is: ENABLED (PID not found)"
        fi
    else
        echo "  BatteryControl is: DISABLED"
    fi

    load_config
    echo "  CHARGE_MAX: $CHARGE_MAX"
    echo "  CHARGE_MIN: $CHARGE_MIN"

    if [ -f "$TURBO_PATH" ]; then
        TURBO_STATUS=$(cat "$TURBO_PATH")
        if [ "$TURBO_STATUS" -eq 1 ]; then
            echo "  Intel Turbo Boost: DISABLED (no_turbo = 1)"
        else
            echo "  Intel Turbo Boost: ENABLED (no_turbo = 0)"
        fi
    else
        echo "  Intel Turbo Boost status: Not available"
    fi

    if [ -f "$PERF_PATH" ]; then
        PERF_VAL=$(cat "$PERF_PATH")
        echo "  max_perf_pct: $PERF_VAL%"
    else
        echo "  max_perf_pct status: Not available"
    fi

    if [ -f "$THERMAL_CONTROL_RUN_FLAG" ]; then
        if [ -f "$THERMAL_CONTROL_PID_FILE" ]; then
            T_PID=$(cat "$THERMAL_CONTROL_PID_FILE")
            if ps -p "$T_PID" > /dev/null 2>&1; then
                echo "  Thermal Control: ENABLED (running, PID $T_PID)"
            else
                echo "  Thermal Control: ENABLED (but process is NOT running)"
            fi
        else
            echo "  Thermal Control: ENABLED (PID not found)"
        fi
    else
        echo "  Thermal Control: DISABLED"
    fi
}

start_monitoring_loop() {
    touch "$RUN_FLAG"
    load_config
    echo $$ > "$PID_FILE"

    echo "BatteryControl started - keep it running for it to remain functioning. (PID $$)."

    while true; do
        if [ ! -f "$RUN_FLAG" ]; then
            echo "BatteryControl disabled, exiting monitoring loop."
            rm -f "$PID_FILE"
            exit 0
        fi

        if [ -f "$BATTERY_PATH" ]; then
            CHARGE=$(cat "$BATTERY_PATH" 2>/dev/null)
        else
            sleep 120
            continue
        fi

        if [ -f "$CHARGER_PATH" ]; then
            AC_ON=$(cat "$CHARGER_PATH" 2>/dev/null)
        else
            sleep 120
            continue
        fi

        if [ "$AC_ON" -eq 1 ]; then
            if [ "$CHARGE" -ge "$CHARGE_MAX" ]; then
                sudo ectool chargecontrol idle >/dev/null 2>&1
            elif [ "$CHARGE" -le "$CHARGE_MIN" ]; then
                sudo ectool chargecontrol normal >/dev/null 2>&1
            fi
        else
            sudo ectool chargecontrol normal >/dev/null 2>&1
        fi

        sleep 120
    done
}

stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "Stopped BatteryControl process (PID $PID)."
        fi
        rm -f "$PID_FILE"
    fi
    rm -f "$RUN_FLAG"
    echo "BatteryControl disabled."
}

# --- Thermal control functions ---

find_cpu_temp_sensor() {
    for ZONE in /sys/class/thermal/thermal_zone*; do
        if grep -q "x86_pkg_temp" "$ZONE/type" 2>/dev/null; then
            echo "$ZONE/temp"
            return 0
        fi
    done
    # fallback
    echo "/sys/class/thermal/thermal_zone0/temp"
}

get_max_perf_pct_by_temp() {
    local TEMP="$1"
    if [ "$TEMP" -le 60000 ]; then
        echo 100
    elif [ "$TEMP" -le 68000 ]; then
        echo 90
    elif [ "$TEMP" -le 74000 ]; then
        echo 80
    elif [ "$TEMP" -le 80000 ]; then
        echo 70
    elif [ "$TEMP" -le 86000 ]; then
        echo 60
    else
        echo 50
    fi
}

thermal_control_start() {
    if [ -f "$THERMAL_CONTROL_RUN_FLAG" ]; then
        echo "Thermal Control is already running."
        exit 0
    fi

    CPU_TEMP_SENSOR=$(find_cpu_temp_sensor)
    if [ ! -f "$CPU_TEMP_SENSOR" ]; then
        echo "CPU temperature sensor not found."
        exit 1
    fi

    touch "$THERMAL_CONTROL_RUN_FLAG"
    echo $$ > "$THERMAL_CONTROL_PID_FILE"
    echo "Thermal Control started - PID $$"

    last_applied=-1
    while true; do
        if [ ! -f "$THERMAL_CONTROL_RUN_FLAG" ]; then
            echo "Thermal Control disabled, exiting."
            rm -f "$THERMAL_CONTROL_PID_FILE"
            exit 0
        fi

        TEMP_RAW=$(cat "$CPU_TEMP_SENSOR" 2>/dev/null)
        if ! [[ "$TEMP_RAW" =~ ^[0-9]+$ ]]; then
            echo "Failed to read CPU temperature."
            sleep 30
            continue
        fi

        NEW_MAX=$(get_max_perf_pct_by_temp "$TEMP_RAW")

        if [ "$NEW_MAX" -ne "$last_applied" ]; then
            if [ -w "$PERF_PATH" ]; then
                echo "$NEW_MAX" | sudo tee "$PERF_PATH" > /dev/null
                echo "$(date): Temp: $((TEMP_RAW / 1000))°C -> max_perf_pct: $NEW_MAX"
                last_applied="$NEW_MAX"
            else
                echo "Permission denied: cannot write to $PERF_PATH"
                rm -f "$THERMAL_CONTROL_RUN_FLAG" "$THERMAL_CONTROL_PID_FILE"
                exit 1
            fi
        fi

        sleep 30
    done
}

thermal_control_stop() {
    if [ -f "$THERMAL_CONTROL_PID_FILE" ]; then
        PID=$(cat "$THERMAL_CONTROL_PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "Stopped Thermal Control process (PID $PID)."
        fi
        rm -f "$THERMAL_CONTROL_PID_FILE"
    fi
    rm -f "$THERMAL_CONTROL_RUN_FLAG"
    echo "Thermal Control disabled."
}

thermal_control_status() {
    if [ -f "$THERMAL_CONTROL_RUN_FLAG" ]; then
        if [ -f "$THERMAL_CONTROL_PID_FILE" ]; then
            PID=$(cat "$THERMAL_CONTROL_PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "Thermal Control is: ENABLED (running, PID $PID)"
            else
                echo "Thermal Control is: ENABLED (but process NOT running)"
            fi
        else
            echo "Thermal Control is: ENABLED (PID file not found)"
        fi
    else
        echo "Thermal Control is: DISABLED"
    fi
}

# --- Main command dispatcher ---

case "$1" in
    set)
        set_thresholds "$2" "$3"
        ;;
    start)
        if [ -f "$RUN_FLAG" ]; then
            echo "BatteryControl is already running."
            exit 0
        fi
        start_monitoring_loop
        ;;
    stop)
        stop_monitoring
        ;;
    status)
        show_status
        ;;
    no_turbo)
        if [[ "$2" != "0" && "$2" != "1" ]]; then
            echo "Usage: $0 no_turbo [1|0]"
            exit 1
        fi
        if [ -w "$TURBO_PATH" ]; then
            echo "$2" | sudo tee "$TURBO_PATH" > /dev/null
            echo "no_turbo is now set to: $2"
        else
            echo "Permission denied or Turbo Boost control not available."
            exit 1
        fi
        ;;
    max_perf_pct)
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
            echo "Error: Argument must be an integer between 10 and 100."
            exit 1
        fi
        if [ "$2" -lt 10 ] || [ "$2" -gt 100 ]; then
            echo "Error: Value must be between 10 and 100."
            exit 1
        fi

        if [ -w "$PERF_PATH" ]; then
            echo "$2" | sudo tee "$PERF_PATH" > /dev/null
            echo "max_perf_pct set to $2%"
        else
            echo "Permission denied or Cannot write to $PERF_PATH."
            exit 1
        fi
        ;;
    thermal_control)
        case "$2" in
            start)
                thermal_control_start
                ;;
            stop)
                thermal_control_stop
                ;;
            status)
                thermal_control_status
                ;;
            *)
                echo "Usage: $0 thermal_control <start|stop|status>"
                exit 1
                ;;
        esac
        ;;
    uninstall)
        if [ -x "/usr/local/bin/ChromeOS_BatteryControl/Uninstall_ChromeOS_BatteryControl.sh" ]; then
            sudo bash /usr/local/bin/ChromeOS_BatteryControl/Uninstall_ChromeOS_BatteryControl.sh
        else
            echo "Uninstall script not found or not executable."
            exit 1
        fi
        ;;
    help | --help | -h)
        show_help
        ;;
    "")
        show_status
        echo "Run 'batterycontrol start' to enable monitoring, or 'batterycontrol stop' to disable."
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$0 help' to see available commands."
        exit 1
        ;;
esac
