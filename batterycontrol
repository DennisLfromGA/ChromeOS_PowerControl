#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR_FILE="/usr/local/bin/.ChromeOS_PowerControl.install_dir"
if [ -f "$INSTALL_DIR_FILE" ]; then
    INSTALL_DIR=$(cat "$INSTALL_DIR_FILE")
else
    INSTALL_DIR="/usr/local/bin/ChromeOS_PowerControl"
fi
INSTALL_DIR="${INSTALL_DIR%/}"

CONFIG_FILE="$INSTALL_DIR/config.sh"
BATTERY_PATH="/sys/class/power_supply/BAT0/capacity"
STATUS_PATH="/sys/class/power_supply/BAT0/status"
RUN_FLAG="$INSTALL_DIR/.batterycontrol_enabled"
PID_FILE="$INSTALL_DIR/.batterycontrol_pid"
LOG="/var/log/batterycontrol.log"

DEFAULT_CHARGE_MAX=77
DEFAULT_CHARGE_MIN=74

CHARGE_MAX=
CHARGE_MIN=

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

validate_config() {
    if [[ -z "$CHARGE_MAX" || ! "$CHARGE_MAX" =~ ^[0-9]+$ ]]; then
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
    fi
    if [[ -z "$CHARGE_MIN" || ! "$CHARGE_MIN" =~ ^[0-9]+$ ]]; then
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
    fi
    if (( CHARGE_MIN >= CHARGE_MAX )); then
        CHARGE_MIN=$DEFAULT_CHARGE_MIN
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
    fi
}

save_config() {
    validate_config

    sed -i "s/^CHARGE_MAX=.*/CHARGE_MAX=$CHARGE_MAX/" "$CONFIG_FILE" || echo "CHARGE_MAX=$CHARGE_MAX" >> "$CONFIG_FILE"
    sed -i "s/^CHARGE_MIN=.*/CHARGE_MIN=$CHARGE_MIN/" "$CONFIG_FILE" || echo "CHARGE_MIN=$CHARGE_MIN" >> "$CONFIG_FILE"

    echo "BatteryControl configuration saved to $CONFIG_FILE"
}

load_config

set_thresholds() {
    if ! [[ "$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$ ]]; then
        echo "Error: Both thresholds must be integers."
        exit 1
    fi
    if [ "$1" -gt 100 ] || [ "$2" -lt 10 ]; then
        echo "Error: CHARGE_MAX cannot be more than 100, and CHARGE_MIN cannot be less than 10."
        exit 1
    fi
    if [ "$2" -ge "$1" ]; then
        echo "Error: CHARGE_MIN must be less than CHARGE_MAX."
        exit 1
    fi

    load_config

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Battery Charge Status: MAX=$1, MIN=$2"
    CHARGE_MAX=$1
    CHARGE_MIN=$2
    save_config
}

show_help() {
    echo "${GREEN}"
    echo "BatteryControl commands with examples:"
    echo
echo "sudo batterycontrol                   # Check BatteryControl status"
echo "sudo batterycontrol start             # Start BatteryControl"
echo "sudo batterycontrol stop              # Stop BatteryControl"
echo "sudo batterycontrol set 77 74         # Set max/min battery charge thresholds"
echo "sudo batterycontrol startup           # Copy or Remove batterycontrol.conf at: /etc/init/"
echo "sudo batterycontrol help              # Help menu${RESET}"
echo ""
}

detect_active_usbpd_port() {
    local port_output
    port_output=$(sudo ectool usbpdpower 2>/dev/null)
    local line port

    while IFS= read -r line; do
        if [[ "$line" =~ ^Port[[:space:]]+([0-9]+):[[:space:]]+SNK[[:space:]]+Charger ]]; then
            port="${BASH_REMATCH[1]}"
            echo "$port"
            return
        fi
    done <<< "$port_output"

    echo "-1"
}

battery_status() {
    if [ -f "$RUN_FLAG" ]; then
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
                echo "${GREEN}BatteryControl is: ENABLED (running, PID $PID)${RESET}"
            else
                echo "${YELLOW}BatteryControl is: ENABLED (but process is NOT running)${RESET}"
                rm -f "$PID_FILE"
            fi
        else
            echo "${YELLOW}BatteryControl is: ENABLED (PID not found)${RESET}"
        fi
    else
        echo "${RED}BatteryControl is: DISABLED${RESET}"
    fi

    echo "  CHARGE_MAX: $CHARGE_MAX"
    echo "  CHARGE_MIN: $CHARGE_MIN"

    local active_port
    active_port=$(detect_active_usbpd_port)
    if [ "$active_port" != "-1" ]; then
        echo "  Active USB-PD Charger Port: $active_port (CROS_USBPD_CHARGER$active_port)"
    else
        echo "  Active USB-PD Charger Port: None detected"
    fi
}

start_monitoring_loop() {
    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"

    echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - BatteryControl started. (PID $$).${RESET}"

    local last_reload_time=0

    while true; do
        if [ ! -f "$RUN_FLAG" ]; then
            echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - BatteryControl stopped, exiting monitoring loop${RESET}."
            rm -f "$PID_FILE"
            exit 0
        fi

        now=$(date +%s)
        if (( now - last_reload_time >= 30 )); then
            load_config
            last_reload_time=$now
        fi

        if [ -f "$BATTERY_PATH" ]; then
            CHARGE=$(cat "$BATTERY_PATH" 2>/dev/null)
        else
            sleep 10
            continue
        fi

        STATUS=$(cat "$STATUS_PATH" 2>/dev/null)
        if [[ "$STATUS" == "Charging" ]]; then
            ACTIVE_PORT=$(detect_active_usbpd_port)
        else
            ACTIVE_PORT="-1"
        fi

        if [ "$ACTIVE_PORT" != "-1" ]; then
            CHARGER_PATH="/sys/class/power_supply/CROS_USBPD_CHARGER${ACTIVE_PORT}/online"
            if [ -f "$CHARGER_PATH" ]; then
                AC_ON=$(cat "$CHARGER_PATH" 2>/dev/null)
            else
                AC_ON=0
            fi
        else
            AC_ON=0
        fi

        if [ "$AC_ON" -eq 1 ]; then
            if [ "$CHARGE" -ge "$CHARGE_MAX" ]; then
                sudo ectool chargecontrol idle >/dev/null 2>&1
            elif [ "$CHARGE" -le "$CHARGE_MIN" ]; then
                sudo ectool chargecontrol normal >/dev/null 2>&1
            fi
        else
            sudo ectool chargecontrol normal >/dev/null 2>&1
        fi

        sleep 10
    done
}

stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Stopping BatteryControl (PID $PID).${RESET}"
        fi
        rm -f "$PID_FILE"
    fi

    rm -f "$RUN_FLAG"
    echo "BatteryControl disabled."
}

case "$1" in
    set)
        set_thresholds "$2" "$3"
        ;;
    start)
        stop_monitoring >/dev/null 2>&1
        LOG_FILE="/var/log/batterycontrol.log"

        if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 32KB)" > "$LOG_FILE"
        fi

        nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
        echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - BatteryControl monitoring started in background. Output is logged to $LOG_FILE${RESET}"
        ;;
    stop)
        stop_monitoring
        ;;
    status)
        battery_status
        ;;
    startup)
        CONF_SOURCE="$INSTALL_DIR/batterycontrol.conf"
        CONF_TARGET="/etc/init/batterycontrol.conf"

        read -p "Do you want BatteryControl to startup automatically? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if [ -f "$CONF_SOURCE" ]; then
                echo "Copying batterycontrol.conf to /etc/init/..."
                sudo cp "$CONF_SOURCE" "$CONF_TARGET"
                echo "${GREEN}batterycontrol.conf copied.${RESET}"
            else
                echo "${RED}batterycontrol.conf not found at $CONF_SOURCE${RESET}"
            fi
        else
            echo "BatteryControl will not startup automatically."
            sudo rm -r /etc/init/batterycontrol.conf
        fi
        ;;
    help | --help | -h)
        show_help
        ;;
    __monitor__)
        start_monitoring_loop
        ;;
    "")
        echo "=== ectool battery ==="
        echo
        sudo ectool battery 2>/dev/null || echo "Failed to run ectool battery (is ectool installed and available?)"
        echo
        sudo ectool usbpdpower 2>/dev/null || echo "Failed to run ectool usbpdpower (is ectool installed and available?)"
        battery_status
        echo
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$0 help' to see available commands."
        exit 1
        ;;
esac
